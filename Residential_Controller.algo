
SET NbFloors TO 10
SET NbShaft TO 1
SET NbElev TO 2
SET DefaultFloor TO 3
SET ELevWorkLoadLimit TO 1800 lb
SET ElevMaxLoadLimit TO 2200 lb

SET DelayDoorOpening TO 5 Seconds
SET TimeOutDoorOpen TO 30 Seconds



WHILE Contoller IS On
	Read Each Button IN Buttons
	IF Button is Pressed THEN
		CALL ButtonPressed (Button)
	CALL CheckLoad
	CALL CheckElevStatus
	CALL VerifyDestinationList
	CALL CheckMovingElevator 
END WHILE 



SEQUENCE ButtonPressed (Button)
    SET Button Active
	IF Button Action IS CallElevator THEN 
		CALL CallElevator (Button Direction, Button FLoor, GoingIn)	
    ELSE IF Button Action IS AddDestinationElev THEN
		IF CALL CheckIfDestinExist (Button Floor, Button Elevator) RETURNING FALSE THEN 
			CALL AddDestinationElev (Button Floor, Button Elevator, GoingOut)	
	ELSE IF Button Action Is OpenDoor THEN
		IF Button Elevator Status IS Stopped OR Idle THEN
			CALL OpenDoor (Button Elevator)
	ELSE IF Button Action IS CloseDoor THEN 
		CALL CloseDoor (Button Elevator) 
    END IF
END SEQUENCE


SEQUENCE CallElevator (Direction, RequestedFloor, IsGoingInOrOut) 
    CALL FindElevator (Direction, RequestedFloor, -1) RETURNING Elevator 
	IF CALL CheckIfDestinExist (RequestedFloor, Elevator) RETURNING FALSE THEN 
		CALL AddDestinationElev (Elevator, RequestedFloor, IsGoingInOrOut) 
END SEQUENCE


SEQUENCE CheckIfDestinExist (Floor, Elevator)
	FOR EACH Destination IN Elevator DestinationList 
		IF Destination = Floor THEN 
			RETURN TRUE
	END FOR
	RETURN FALSE
END SEQUENCE


SEQUENCE FindElevator (RequestedDirection, RequestedFloor, OldElevator)
    FOR EACH Elevator IN Elevators
		IF Elevator Number <> OldElevator THEN
			COMPUTE CurrentGap as ABSOLUTE Of CurrentFloor - RequestedFloor
			COMPUTE ListLength as Length of DestinationList			
			IF RequestedFloor = CurrentFloor THEN
				IF (Status Is Stopped AND Direction = RequestedDirection) OR (Status IS Idle AND DestinationList IS EMPTY) THEN
					RETURN Elevator			
			ELSE IF (RequestedFloor > CurrentFloor AND Direction IS Up AND RequestedDirection IS Up) OR (RequestedFloor < CurrentFloor AND Direction IS Down AND RequestedDirection IS Down) THEN
				IF Status IS Moving OR Stopped THEN
					Return Elevator 			
			ELSE IF Status IS Idle AND DestinationList IS EMPTY THEN
				Return Elevator
			END IF
        END IF
	END FOR	
	CALL NearestElevator (RequestedFloor, RequestedDirection) RETURNING ElevWithShortestGap 
	IF ElevWithShortestGap NOT EMPTY AND OldElevator IS -1 THEN 
		RETURN ElevWithShortestGap
	ELSE 
		CALL ShortestFloorList RETURNING ElevWithShortestList
		RETURN ElevWithShortestList
	END IF
END SEQUENCE


SEQUENCE ShortestFloorList 
	SET Length TO 99999
    FOR EACH Elevator IN Elevators
        IF Length > COMPUTE Length Of DestinationList THEN 
			SET Length TO COMPUTE Length Of DestinationList
			SET ElevWithShortestList TO Elevator
		END IF			
    END FOR 
    RETURN ElevWithShortestList
END SEQUENCE


SEQUENCE NearestElevator (RequestedFloor, RequestedDirection)
	SET Gap TO 99999
    FOR EACH Elevator IN Elevators
        IF Gap > COMPUTE ABSOLUTE Of CurrentFloor - RequestedFLoor THEN 
			IF (RequestedFloor > CurrentFloor AND Direction IS Up AND RequestedDirection IS Up) OR (RequestedFloor < CurrentFloor AND Direction IS Down AND RequestedDirection IS Down) THEN
				SET Gap TO COMPUTE ABSOLUTE Of CurrentFloor - RequestedFLoor
				SET ElevWithShortestGap TO Elevator 
			END IF
		END IF
    END FOR 
    RETURN ElevWithShortestGap
END SEQUENCE


SEQUENCE AddDestinationElev (Floor, Elevator, IsGoingInOrOut)
    IF Elevator Status IS Idle THEN
        ADD Floor IN Elevator DestinationList
		ADD IsGoingInOrOut AT Position IN DestinationList 
    ELSE
        FOR EACH Destination IN Elevator DestinationList
            IF Destination NOT EMPTY THEN
                If Elevator Direction IS Up THEN
                    IF Floor < Destination AND Floor > CurrentFloor THEN
                        COMPUTE Position IN DestinationList
                        ADD Floor AT Position IN DestinationList
                        ADD IsGoingInOrOut AT Position IN DestinationList 
                        RETURN
                    ELSE
                        IF Floor > Destination AND Destination < CurrentFloor THEN
							COMPUTE Position IN DestinationList
							ADD Floor AT Position IN DestinationList
							ADD IsGoingInOrOut AT Position IN DestinationList 
							RETURN
						END IF
                    END IF
                ELSE IF Elevator Direction IS Down
                    IF Floor > Destination AND Floor < CurrentFloor THEN
                        COMPUTE Position IN DestinationList
                        ADD Floor AT Position IN DestinationList
                        ADD IsGoingInOrOut AT Position IN DestinationList 
                        RETURN
                    ELSE
                        IF Floor < Destination AND Destination > CurrentFloor THEN
							COMPUTE Position IN DestinationList
							ADD Floor AT Position IN DestinationList
							ADD IsGoingInOrOut AT Position IN DestinationList 
							RETURN
                        END IF               
                    END IF
                END IF
            ELSE
                ADD Floor TO DestinationList
                ADD IsGoingInOrOut AT Position IN DestinationList 
                RETURN 
			END IF         
        END FOR
    END IF
END SEQUENCE 


SEQUENCE CheckLoad
    FOR EACH Elevator IN Elevators
        READ Load 
        If CurrentLoad > ELevWorkLoadLimit THEN
            SET LoadError TO 1   '//Continue to move without taking new people
			SET Alarm TO Inactive
        ELSE IF CurrentLoad > ElevMaxLoadLimit THEN
            SET LoadError TO 2   '//Halted until load is removed
			SET Alarm TO Active
        ELSE 
            SET LoadError TO 0   '//Move Normally
			SET Alarm TO Inactive
        END IF
    END FOR
END SEQUENCE


SEQUENCE CheckElevatorStatus 
	FOR EACH Elevator IN Elevators
		IF DoorOpenTimer = 0 Seconds THEN 
			CALL ForceCloseDoor (Elevator)
		END IF 
		IF IdleTimer = 0 Seconds THEN
			CALL AddDestinationElev (DefaultFloor, Elevator, GoingOut)
		END IF
	END FOR
END SEQUENCE


SEQUENCE VerifyDestinationList 
	FOR EACH Elevator In Elevators
		IF First Destination IN Elevator DestinationList NOT EMPTY THEN
			IF LoadError <> 2 THEN
				IF LoadError = 1 THEN 
					IF DestinationList IsGoingInOrOut IS GoingOut THEN
						CALL StartMove (Elevator)
					ELSE
						SET DestinationTempor TO First Destination FROM DestinationList
						SET IsGoingInOrOutTempor TO First IsGoingInOrOut FROM DestinationList
						DELETE First Destination FROM DestinationList
						DELETE First IsGoingInOrOut FROM DestinationList
						CALL FindElevator (Elevator Direction, DestinationTempor, Elevator) RETURNING NewElevator
						CALL AddDestinationElev (DestinationTempor, NewElevator, IsGoingInOrOutTempor)
					END IF
				ELSE 
					IF Elevator CurrentFloor = Destination THEN 
						CALL OpenDoor (Elevator)
					ELSE 
						CALL StartMove (Elevator)
					END IF
				END IF
			ELSE 
				CALL OpenDoor (Elevator)
			END IF
		END IF 
	END FOR 
END SEQUENCE


SEQUENCE StartMove (Elevator)
	IF CurrentFloor < First Destination IN Elevator DestinationList THEN 
		SET Direction TO Up
	ELSE 
		SET Direction TO Down
	END IF
	SET Status TO Moving
	Start Move TO First Destination IN Elevator DestinationList 	
END SEQUENCE


SEQUENCE CheckMovingElevator 
	FOR EACH Elevator IN Elevators
		IF Elevator Status IS Moving THEN
			READ Floor Level
			IF Elevator CurrentFloor <> Floor Level THEN
				SET CurrentFloor TO Floor Level
				DISPLAY Elevator CurrentFloor ON Internal AND External Elevator Display
			END IF
			IF Elevator CurrentFloor = First Destination IN Elevator DestinationList THEN
				CALL StopElevator (Elevator)
				CALL ClearButtons (Elevator)
			END IF
		END IF
		IF Status IS Stopped THEN 
			CALL OpenDoor (Elevator)
		END IF
	END FOR
END SEQUENCE 


SEQUENCE StopElevator (Elevator)
	Stop Elevator
	INIT Timer TO 2 Seconds
	INIT DoorOpenTimer TO 30 Seconds
	SET Status TO Stopped
END SEQUENCE


SEQUENCE ClearButtons (Elevator)
	CALL FindDirectionButton (Elevator Direction, ELevator CurrentFloor) RETURNING Button
	SET Button Inactive
	CALL FindFloorButton (Elevator CurrentFloor) RETURNING Button
	SET Button Inactive	
END SEQUENCE


SEQUENCE FindDirectionButton (Direction, RequestedFloor) 
    FOR EACH Button IN DirectionButtons 
        IF RequestedFloor = FloorButton AND Direction = DirectionButton THEN
			RETURN Button 
    END FOR 
END SEQUENCE 


SEQUENCE FindFloorButton (CurrentFloor) 
    FOR EACH Button IN FloorButtons 
        IF CurrentFloor = FloorButton THEN
			RETURN Button 
    END FOR 
END SEQUENCE 


SEQUENCE OpenDoor (Elevator)
	WAIT UNTIL Elevator Status IS Stopped OR Idle 
	Open Door
    INIT Timer TO 5 Seconds 
	WHILE Timer > 0 Second OR Door IS Obstructed OR LoadError IS 2
		KEEP Door Opened
	END WHILE 
	CALL CloseDoor (Elevator)
END SEQUENCE


SEQUENCE CloseDoor (Elevator)
	Close Door
	WHILE Door IS Closing 
		IF Obstructed THEN
			Call OpenDoor (Elevator)
	END WHILE
	IF Door IS Closed THEN
		SET Elevator Status TO Idle 
		INIT IdleTimer TO 30 Seconds
	END IF 
END SEQUENCE


SEQUENCE ForceCloseDoor (Elevator)
	SET Alarm TO Active 
	Close Slowly
	IF Door IS Closed THEN
        SET Elevator Status TO Idle
		Init IdleTimer TO 30 Seconds
		SET Alarm TO Inactive
	END IF
END SEQUENCE

